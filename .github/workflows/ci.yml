name: Continuous Integration

on:
  push:
    branches: [main, test1-ci]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Add this for manual triggering

permissions:
  security-events: write # Required for SARIF upload
  actions: read
  contents: read

env:
  NODE_VERSION: "20.19.0"
  Emscripten_VERSION: "3.1.45"
  PYTHON_VERSION: "3.12"

jobs:
  # Frontend CI
  frontend-ci:
    name: Frontend - Lint, Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run lint
        working-directory: ./frontend
        run: npm run lint

      - name: Type checking
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Check Prettier formatting
        working-directory: ./frontend
        run: npm run format:check

      - name: Run unit tests
        working-directory: ./frontend
        run: npm test

      - name: Build for production
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # Backend CI
  backend-ci:
    name: Backend - WebAssembly Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: ${{ env.Emscripten_VERSION }}

      - name: Build WebAssembly
        working-directory: ./backend
        run: |
          source $EMSDK/emsdk_env.sh
          mkdir -p build/
          chmod +x scripts/build_wasm.sh
          ./scripts/build_wasm.sh

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: |
            backend/build/
            frontend/public/drawing_engine.*
          retention-days: 7

  # WebSocket Server CI
  websocket-server-ci:
    name: WebSocket Server - Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build WebSocket Server
        working-directory: ./websocket-server
        run: |
          docker build -t websocket-server-test .

      - name: Test WebSocket Server
        run: |
          # Start server in background
          docker run -d --name test-server -p 8080:8080 websocket-server-test
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1

          # Cleanup
          docker stop test-server
          docker rm test-server

      - name: Upload WebSocket Server artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocket-server-build
          path: websocket-server/
          retention-days: 7

  # ML Service CI
  ml-service-ci:
    name: ML Service - Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ml_shapes/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('ml_shapes/poetry.lock') }}

      - name: Install dependencies
        working-directory: ./ml_shapes
        run: |
          poetry env use python
          # Use CPU PyTorch for CI (no GPU available)
          poetry install --no-interaction --only main --no-root

      - name: Run ML service tests
        working-directory: ./ml_shapes
        run: |
          poetry run python -m pytest tests/ -v || echo "No tests found, continuing..."

      - name: Build ML service Docker image
        working-directory: ./ml_shapes
        run: |
          docker build -t ml-service-test .

      - name: Test ML service
        run: |
          # Start ML service in background
          docker run -d --name test-ml-service -p 8000:8000 ml-service-test
          sleep 15

          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Cleanup
          docker stop test-ml-service
          docker rm test-ml-service

      - name: Upload ML service artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ml-service-build
          path: ml_shapes/
          retention-days: 7

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, websocket-server-ci, ml-service-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build
          path: ./

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run integration tests
        working-directory: ./frontend
        run: |
          # Add your integration test commands here
          echo "Running integration tests..."
          # npm run test:integration

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
